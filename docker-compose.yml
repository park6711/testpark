services:
  # React 프론트엔드 (개발용)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: testpark-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      # 개발 환경: localhost, 프로덕션: 실제 도메인 사용
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - CHOKIDAR_USEPOLLING=true  # 파일 변경 감지 개선
      - NODE_OPTIONS=--max-old-space-size=4096  # Node.js 메모리 할당 증가
    restart: unless-stopped
    networks:
      - testpark-network
    labels:
      - "com.testpark.service=frontend"
      - "com.testpark.description=TestPark React Frontend"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # TestPark 메인 애플리케이션
  testpark:
    image: 7171man/testpark:latest
    container_name: testpark
    ports:
      - "8000:8000"
    volumes:
      # DB 파일만 마운트 (데이터 유지)
      - ./db.sqlite3:/app/db.sqlite3
      - ./media:/app/media  # 업로드 파일 유지
      - ./seongdal-a900e25ac63c.json:/app/seongdal-a900e25ac63c.json  # 구글 시트 인증 파일
    env_file:
      - .env
    environment:
      # 네이버 로그인 및 프록시 설정
      - ALLOWED_HOSTS=carpenterhosting.cafe24.com,210.114.22.100,localhost,127.0.0.1
      - USE_X_FORWARDED_HOST=true
      - USE_X_FORWARDED_PORT=true
      - SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https
      - FORCE_SCRIPT_NAME=
      # 네트워크 최적화
      - DJANGO_SETTINGS_MODULE=testpark_project.settings
      - PYTHONUNBUFFERED=1  # 로그 버퍼링 비활성화
    restart: unless-stopped
    networks:
      - testpark-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.testpark.service=main"
      - "com.testpark.description=TestPark Django Application"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'

  # TestPark 웹훅 서버
  webhook:
    build:
      context: .
      dockerfile: webhook.Dockerfile
    container_name: testpark-webhook
    ports:
      - "8080:8080"
    volumes:
      # Docker socket 마운트 (컨테이너에서 Docker 명령 실행용)
      - /var/run/docker.sock:/var/run/docker.sock
      # 배포 스크립트 및 프로젝트 디렉토리 마운트
      - .:/var/www/testpark
    working_dir: /var/www/testpark
    environment:
      - NODE_ENV=production
      - WEBHOOK_PORT=8080
      - WEBHOOK_SECRET=testpark-webhook-secret
      - DEPLOY_SCRIPT=/var/www/testpark/scripts/deploy-docker.sh
    restart: unless-stopped
    networks:
      - testpark-network
    depends_on:
      testpark:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "com.testpark.service=webhook"
      - "com.testpark.description=TestPark Webhook Server"

networks:
  testpark-network:
    driver: bridge
    name: testpark-network

# 프로젝트 메타데이터
x-project-info:
  name: "TestPark"
  description: "TestPark Full-Stack Application (Django + React)"
  version: "3.0.0"
  services:
    - "React Frontend (port 3000)"
    - "Django Backend API (port 8000)"
    - "Webhook Server (port 8080)"
  external_dependencies:
    - "Apache Proxy (ports 80/443)"
    - "intea Django WSGI"
    - "PMIS Django WSGI"