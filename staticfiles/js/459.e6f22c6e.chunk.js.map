{"version":3,"file":"static/js/459.e6f22c6e.chunk.js","mappings":"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","sources":["components/modals/MemoModal.tsx","constants/index.ts","components/modals/StatusModal.tsx","components/orders/OrderList.tsx","services/api.ts","components/QuoteManagement.tsx","hooks/useOrders.ts"],"sourcesContent":["// 메모 모달 컴포넌트 (Ant Design)\n\nimport React, { useState } from 'react';\nimport { Modal, Input, Button, List, Typography, Space, message, Empty, Alert } from 'antd';\nimport { MessageOutlined, UserOutlined, ClockCircleOutlined } from '@ant-design/icons';\nimport { MemoData } from '../../types';\n\nconst { TextArea } = Input;\nconst { Text, Title } = Typography;\n\ninterface MemoModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  orderId: number;\n  orderName: string;\n  memos: MemoData[];\n  onAddMemo: (content: string) => Promise<{ success: boolean; error?: string }>;\n}\n\nconst MemoModal: React.FC<MemoModalProps> = ({\n  isOpen,\n  onClose,\n  orderId,\n  orderName,\n  memos = [],\n  onAddMemo\n}) => {\n  const [newMemo, setNewMemo] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async () => {\n    if (!newMemo.trim()) {\n      message.warning('메모 내용을 입력해주세요.');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const result = await onAddMemo(newMemo);\n      if (result.success) {\n        message.success('메모가 추가되었습니다.');\n        setNewMemo('');\n      } else {\n        message.error(result.error || '메모 추가 중 오류가 발생했습니다.');\n      }\n    } catch (err) {\n      message.error('메모 추가 중 오류가 발생했습니다.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <MessageOutlined />\n          <span>메모 관리 - {orderName}</span>\n        </Space>\n      }\n      open={isOpen}\n      onCancel={onClose}\n      width={700}\n      footer={null}\n      destroyOnClose\n    >\n      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n        {/* 새 메모 입력 섹션 */}\n        <div style={{ background: '#f5f5f5', padding: 16, borderRadius: 8 }}>\n          <Title level={5}>새 메모 작성</Title>\n          <TextArea\n            value={newMemo}\n            onChange={(e) => setNewMemo(e.target.value)}\n            placeholder=\"메모 내용을 입력하세요...\"\n            rows={4}\n            disabled={isSubmitting}\n            style={{ marginBottom: 12 }}\n          />\n          <Button\n            type=\"primary\"\n            onClick={handleSubmit}\n            loading={isSubmitting}\n            disabled={!newMemo.trim()}\n          >\n            메모 추가\n          </Button>\n        </div>\n\n        {/* 기존 메모 목록 */}\n        <div>\n          <Title level={5}>메모 목록 ({memos.length}개)</Title>\n          {memos.length === 0 ? (\n            <Empty description=\"등록된 메모가 없습니다.\" />\n          ) : (\n            <List\n              dataSource={memos}\n              renderItem={(memo) => (\n                <List.Item style={{ background: 'white', marginBottom: 8, padding: 16, borderRadius: 8, border: '1px solid #f0f0f0' }}>\n                  <List.Item.Meta\n                    title={\n                      <Space>\n                        <UserOutlined />\n                        <Text strong>{memo.author}</Text>\n                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\n                          <ClockCircleOutlined style={{ marginRight: 4 }} />\n                          {formatDate(memo.created_at)}\n                        </Text>\n                      </Space>\n                    }\n                    description={\n                      <Text style={{ whiteSpace: 'pre-wrap' }}>{memo.content}</Text>\n                    }\n                  />\n                </List.Item>\n              )}\n              style={{ maxHeight: 400, overflow: 'auto' }}\n            />\n          )}\n        </div>\n      </Space>\n    </Modal>\n  );\n};\n\nexport default MemoModal;","// 애플리케이션 상수\n\n// 상태 옵션\nexport const STATUS_OPTIONS = [\n  { value: '접수완료', label: '접수완료', color: '#4CAF50' },\n  { value: '업체전달', label: '업체전달', color: '#2196F3' },\n  { value: '현장미팅', label: '현장미팅', color: '#FF9800' },\n  { value: '견적전달', label: '견적전달', color: '#9C27B0' },\n  { value: '계약완료', label: '계약완료', color: '#00BCD4' },\n  { value: '시공중', label: '시공중', color: '#FFC107' },\n  { value: '완료', label: '완료', color: '#8BC34A' },\n  { value: '취소', label: '취소', color: '#F44336' },\n  { value: '보류', label: '보류', color: '#9E9E9E' }\n];\n\n// 메시지 템플릿\nexport const MESSAGE_TEMPLATES = {\n  '템플릿1': '안녕하세요, {name}님. 문의주신 건에 대해 안내드립니다.',\n  '템플릿2': '견적 확인 부탁드립니다. 추가 문의사항이 있으시면 연락주세요.',\n  '템플릿3': '시공 일정 조율을 위해 연락드립니다. 가능하신 시간을 알려주세요.',\n  '커스텀': ''\n};\n\n// 페이지 크기 옵션\nexport const PAGE_SIZE_OPTIONS = [10, 20, 50, 100];\n\n// 기본 페이지 크기\nexport const DEFAULT_PAGE_SIZE = 20;\n\n// 날짜 형식\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const DATETIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\n// 지역 옵션\nexport const AREA_OPTIONS = [\n  '서울',\n  '경기',\n  '인천',\n  '대전',\n  '대구',\n  '부산',\n  '광주',\n  '울산',\n  '세종',\n  '강원',\n  '충북',\n  '충남',\n  '전북',\n  '전남',\n  '경북',\n  '경남',\n  '제주'\n];\n\n// 시공 유형\nexport const CONSTRUCTION_TYPES = [\n  '전체시공',\n  '부분시공',\n  '도배',\n  '장판',\n  '타일',\n  '욕실',\n  '주방',\n  '인테리어',\n  '기타'\n];\n\n// API 엔드포인트\nexport const API_ENDPOINTS = {\n  ORDERS: '/order/api/orders/',\n  COMPANIES: '/order/api/companies/',\n  AREAS: '/order/api/areas/',\n  MEMOS: '/order/api/memos/',\n  STATUS_UPDATE: '/order/api/orders/{id}/update_status/',\n  FIELD_UPDATE: '/order/api/orders/{id}/update_field/',\n  ADD_MEMO: '/order/api/orders/{id}/add_memo/',\n  ADD_QUOTE: '/order/api/orders/{id}/add_quote_link/',\n  BULK_DELETE: '/order/api/orders/bulk_delete/'\n};","// 상태 변경 모달 컴포넌트 (Ant Design)\n\nimport React, { useState } from 'react';\nimport { Modal, Radio, Input, Button, Space, Typography, Tag, message, Alert } from 'antd';\nimport { EditOutlined, CheckCircleOutlined } from '@ant-design/icons';\nimport { STATUS_OPTIONS } from '../../constants';\n\nconst { TextArea } = Input;\nconst { Text, Title } = Typography;\n\ninterface StatusModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  orderId: number;\n  orderName: string;\n  currentStatus: string;\n  onStatusUpdate: (status: string, note?: string) => Promise<{ success: boolean; error?: string }>;\n}\n\nconst StatusModal: React.FC<StatusModalProps> = ({\n  isOpen,\n  onClose,\n  orderId,\n  orderName,\n  currentStatus,\n  onStatusUpdate\n}) => {\n  const [selectedStatus, setSelectedStatus] = useState(currentStatus);\n  const [note, setNote] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async () => {\n    if (!selectedStatus) {\n      message.warning('상태를 선택해주세요.');\n      return;\n    }\n\n    if (selectedStatus === currentStatus) {\n      message.info('현재 상태와 동일합니다.');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const result = await onStatusUpdate(selectedStatus, note);\n      if (result.success) {\n        message.success('상태가 변경되었습니다.');\n        onClose();\n      } else {\n        message.error(result.error || '상태 변경 중 오류가 발생했습니다.');\n      }\n    } catch (err) {\n      message.error('상태 변경 중 오류가 발생했습니다.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setSelectedStatus(currentStatus);\n    setNote('');\n    onClose();\n  };\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <EditOutlined />\n          <span>상태 변경 - {orderName}</span>\n        </Space>\n      }\n      open={isOpen}\n      onCancel={handleCancel}\n      width={600}\n      footer={[\n        <Button key=\"cancel\" onClick={handleCancel} disabled={isSubmitting}>\n          취소\n        </Button>,\n        <Button\n          key=\"submit\"\n          type=\"primary\"\n          onClick={handleSubmit}\n          loading={isSubmitting}\n          disabled={selectedStatus === currentStatus}\n          icon={<CheckCircleOutlined />}\n        >\n          상태 변경\n        </Button>\n      ]}\n      destroyOnClose\n    >\n      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n        {/* 현재 상태 표시 */}\n        <Alert\n          message=\"현재 상태\"\n          description={\n            <Tag\n              color={STATUS_OPTIONS.find(opt => opt.value === currentStatus)?.color}\n              style={{ fontSize: 14, padding: '4px 12px' }}\n            >\n              {currentStatus}\n            </Tag>\n          }\n          type=\"info\"\n          showIcon\n        />\n\n        {/* 상태 선택 */}\n        <div>\n          <Title level={5} style={{ marginBottom: 16 }}>변경할 상태</Title>\n          <Radio.Group\n            value={selectedStatus}\n            onChange={(e) => setSelectedStatus(e.target.value)}\n            disabled={isSubmitting}\n            style={{ width: '100%' }}\n          >\n            <Space wrap>\n              {STATUS_OPTIONS.map((status) => (\n                <Radio.Button\n                  key={status.value}\n                  value={status.value}\n                  style={{\n                    borderColor: status.color,\n                    color: selectedStatus === status.value ? 'white' : status.color,\n                    backgroundColor: selectedStatus === status.value ? status.color : 'white',\n                    fontWeight: selectedStatus === status.value ? 'bold' : 'normal'\n                  }}\n                >\n                  {status.label}\n                </Radio.Button>\n              ))}\n            </Space>\n          </Radio.Group>\n        </div>\n\n        {/* 변경 사유 입력 */}\n        <div>\n          <Title level={5} style={{ marginBottom: 8 }}>변경 사유 (선택사항)</Title>\n          <TextArea\n            value={note}\n            onChange={(e) => setNote(e.target.value)}\n            placeholder=\"상태 변경 사유를 입력하세요...\"\n            rows={3}\n            disabled={isSubmitting}\n          />\n        </div>\n\n        {/* 변경 예정 상태 미리보기 */}\n        {selectedStatus !== currentStatus && (\n          <Alert\n            message=\"변경 예정\"\n            description={\n              <Space>\n                <Tag\n                  color={STATUS_OPTIONS.find(opt => opt.value === currentStatus)?.color}\n                >\n                  {currentStatus}\n                </Tag>\n                <span>→</span>\n                <Tag\n                  color={STATUS_OPTIONS.find(opt => opt.value === selectedStatus)?.color}\n                  style={{ fontSize: 14, padding: '4px 12px' }}\n                >\n                  {selectedStatus}\n                </Tag>\n              </Space>\n            }\n            type=\"success\"\n            showIcon\n          />\n        )}\n      </Space>\n    </Modal>\n  );\n};\n\nexport default StatusModal;","// 의뢰 목록 컴포넌트 (Ant Design)\n\nimport React, { useState } from 'react';\nimport {\n  Table,\n  Button,\n  Space,\n  Tag,\n  Popconfirm,\n  message,\n  Tooltip,\n  Typography,\n  Row,\n  Col,\n  Dropdown,\n  Badge,\n  Card\n} from 'antd';\nimport type { ColumnsType, TableRowSelection } from 'antd/es/table/interface';\nimport {\n  DeleteOutlined,\n  ReloadOutlined,\n  DownloadOutlined,\n  EditOutlined,\n  MessageOutlined,\n  MoreOutlined,\n  EyeOutlined,\n  PhoneOutlined,\n  EnvironmentOutlined,\n  CalendarOutlined,\n  TeamOutlined,\n  CopyOutlined,\n  LinkOutlined,\n  UserOutlined\n} from '@ant-design/icons';\nimport { MemoModal, StatusModal } from '../modals';\nimport { OrderData } from '../../types';\nimport { STATUS_OPTIONS } from '../../constants';\n\nconst { Text } = Typography;\n\ninterface OrderListProps {\n  orders: OrderData[];\n  loading: boolean;\n  error: string | null;\n  onRefresh: () => void;\n  onDeleteOrders: (orderIds: number[]) => Promise<{ success: boolean; error?: string }>;\n  onUpdateStatus: (orderId: number, status: string, note?: string) => Promise<{ success: boolean; error?: string }>;\n  onAddMemo: (orderId: number, content: string) => Promise<{ success: boolean; error?: string }>;\n  onUpdateField: (orderId: number, fieldName: string, fieldLabel: string, newValue: any) => Promise<{ success: boolean; error?: string }>;\n}\n\nconst OrderList: React.FC<OrderListProps> = ({\n  orders,\n  loading,\n  error,\n  onRefresh,\n  onDeleteOrders,\n  onUpdateStatus,\n  onAddMemo,\n  onUpdateField\n}) => {\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\n  const [selectedOrder, setSelectedOrder] = useState<OrderData | null>(null);\n  const [memoModalOpen, setMemoModalOpen] = useState(false);\n  const [statusModalOpen, setStatusModalOpen] = useState(false);\n\n\n  const handleDeleteSelected = async () => {\n    if (selectedRowKeys.length === 0) {\n      message.warning('삭제할 항목을 선택해주세요.');\n      return;\n    }\n\n    const result = await onDeleteOrders(selectedRowKeys as number[]);\n    if (result.success) {\n      message.success(`${selectedRowKeys.length}개 항목이 삭제되었습니다.`);\n      setSelectedRowKeys([]);\n    } else {\n      message.error(result.error || '삭제 중 오류가 발생했습니다.');\n    }\n  };\n\n  const handleCopyOrder = async (order: OrderData) => {\n    // 새로운 의뢰 생성 (같은 정보로 복사)\n    const copiedOrder = {\n      ...order,\n      no: undefined, // 새로운 번호 할당을 위해\n      time: new Date().toISOString(),\n      recent_status: '대기중',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    };\n\n    try {\n      // TODO: API 호출로 새 의뢰 생성\n      message.success('의뢰가 복사되었습니다');\n      onRefresh(); // 목록 새로고침\n    } catch (error) {\n      message.error('복사 중 오류가 발생했습니다');\n    }\n  };\n\n  const handleExport = () => {\n    const headers = ['번호', '접수일시', '고객명', '전화번호', '지역', '공사내용', '업체', '상태'];\n    const csvContent = [\n      headers.join(','),\n      ...orders.map(order => [\n        order.no,\n        order.time,\n        order.sName,\n        order.sPhone,\n        order.sArea,\n        `\"${order.sConstruction.replace(/\"/g, '\"\"')}\"`,\n        order.assigned_company || '',\n        order.recent_status\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob(['\\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `orders_${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    message.success('내보내기가 완료되었습니다.');\n  };\n\n  const openMemoModal = (order: OrderData) => {\n    setSelectedOrder(order);\n    setMemoModalOpen(true);\n  };\n\n  const openStatusModal = (order: OrderData) => {\n    setSelectedOrder(order);\n    setStatusModalOpen(true);\n  };\n\n  const columns: ColumnsType<OrderData> = [\n    {\n      title: '접수일시',\n      dataIndex: 'time',\n      key: 'time',\n      width: 120,  // 너비를 약간 늘림\n      sorter: (a, b) => new Date(a.time).getTime() - new Date(b.time).getTime(),\n      render: (time) => {\n        const date = new Date(time);\n        return (\n          <Space direction=\"vertical\" size={0}>\n            <Text style={{ fontSize: 11 }}>{date.toLocaleDateString('ko-KR')}</Text>\n            <Text type=\"secondary\" style={{ fontSize: 10 }}>\n              {date.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' })}\n            </Text>\n          </Space>\n        );\n      }\n    },\n    {\n      title: '지정여부',\n      dataIndex: 'designation_type',\n      key: 'designation_type',\n      width: 110,  // 너비를 약간 늘림\n      filters: [\n        { text: '지정없음', value: '지정없음' },\n        { text: '업체지정', value: '업체지정' },\n        { text: '공동구매', value: '공동구매' },\n      ],\n      onFilter: (value, record) => record.designation_type === value,\n      render: (type, record) => (\n        <Space direction=\"vertical\" size={0}>\n          <Tag color={type === '업체지정' ? 'blue' : type === '공동구매' ? 'green' : 'default'}>\n            {type}\n          </Tag>\n          {record.designation && (\n            <Text style={{ fontSize: 10 }}>{record.designation}</Text>\n          )}\n        </Space>\n      )\n    },\n    {\n      title: '고객정보',\n      key: 'customer_info',\n      width: 160,  // 너비 최적화\n      render: (_, record) => (\n        <Space direction=\"vertical\" size={0}>\n          <Space size={4}>\n            <UserOutlined style={{ fontSize: 11 }} />\n            <Text strong style={{ fontSize: 12 }}>{record.sName}</Text>\n            {record.sNick && <Tag color=\"orange\" style={{ fontSize: 10 }}>{record.sNick}</Tag>}\n          </Space>\n          {record.sNaverID && (\n            <Text type=\"secondary\" style={{ fontSize: 11 }}>ID: {record.sNaverID}</Text>\n          )}\n          <Tooltip title=\"전화 걸기\">\n            <a href={`tel:${record.sPhone}`} style={{ fontSize: 11 }}>\n              <PhoneOutlined /> {record.sPhone}\n            </a>\n          </Tooltip>\n        </Space>\n      )\n    },\n    {\n      title: '의뢰게시글',\n      dataIndex: 'post_link',\n      key: 'post_link',\n      width: 90,  // 너비 최적화\n      render: (link, record) => (\n        <Space direction=\"vertical\" size={0}>\n          {record.sPost && (\n            <Text ellipsis style={{ maxWidth: 90, fontSize: 11 }}>{record.sPost}</Text>\n          )}\n          {link && (\n            <Tooltip title={link}>\n              <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                <LinkOutlined /> 보기\n              </a>\n            </Tooltip>\n          )}\n        </Space>\n      )\n    },\n    {\n      title: '공사지역',\n      dataIndex: 'sArea',\n      key: 'sArea',\n      width: 100,  // 너비를 약간 늘림\n      filters: Array.from(new Set(orders.map(o => o.sArea))).map(area => ({ text: area, value: area })),\n      onFilter: (value, record) => record.sArea === value,\n      render: (area) => (\n        <Tag color=\"blue\" style={{ fontSize: 11 }}>\n          <EnvironmentOutlined /> {area}\n        </Tag>\n      )\n    },\n    {\n      title: '공사예정일',\n      dataIndex: 'dateSchedule',\n      key: 'dateSchedule',\n      width: 110,  // 너비를 약간 늘림\n      sorter: (a, b) => {\n        if (!a.dateSchedule) return 1;\n        if (!b.dateSchedule) return -1;\n        return new Date(a.dateSchedule).getTime() - new Date(b.dateSchedule).getTime();\n      },\n      render: (date) => {\n        if (!date) return <Text type=\"secondary\" style={{ fontSize: 11 }}>미정</Text>;\n        const scheduleDate = new Date(date);\n        const today = new Date();\n        const diffDays = Math.ceil((scheduleDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n\n        let color = 'default';\n        if (diffDays < 0) color = 'red';\n        else if (diffDays === 0) color = 'orange';\n        else if (diffDays <= 3) color = 'gold';\n        else color = 'green';\n\n        return (\n          <Tag color={color} style={{ fontSize: 11 }}>\n            <CalendarOutlined /> {scheduleDate.toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' })}\n            {diffDays === 0 && ' (오늘)'}\n          </Tag>\n        );\n      }\n    },\n    {\n      title: '공사내용',\n      dataIndex: 'sConstruction',\n      key: 'sConstruction',\n      // width 제거 - 남은 공간을 모두 차지하도록 함\n      ellipsis: {\n        showTitle: false,\n      },\n      render: (construction) => (\n        <Tooltip placement=\"topLeft\" title={construction}>\n          <Text ellipsis style={{ maxWidth: '100%', fontSize: 11 }}>\n            {construction}\n          </Text>\n        </Tooltip>\n      )\n    },\n    {\n      title: '업체할당',\n      dataIndex: 'assigned_company',\n      key: 'assigned_company',\n      width: 100,  // 너비 최적화\n      filters: Array.from(new Set(orders.map(o => o.assigned_company).filter(Boolean))).map(company => ({ text: company, value: company })),\n      onFilter: (value, record) => record.assigned_company === value,\n      render: (company) => company ? (\n        <Tag color=\"purple\" style={{ fontSize: 11 }}>\n          <TeamOutlined /> {company}\n        </Tag>\n      ) : (\n        <Button type=\"dashed\" size=\"small\" style={{ fontSize: 10 }}>\n          할당하기\n        </Button>\n      )\n    },\n    {\n      title: '할당상태',\n      dataIndex: 'recent_status',\n      key: 'recent_status',\n      width: 85,  // 너비 최적화\n      filters: STATUS_OPTIONS.map(s => ({ text: s.label, value: s.value })),\n      onFilter: (value, record) => record.recent_status === value,\n      render: (status) => {\n        const statusOption = STATUS_OPTIONS.find(s => s.value === status);\n        return (\n          <Tag\n            color={statusOption?.color}\n            style={{ cursor: 'pointer', fontSize: 11 }}\n            onClick={() => openStatusModal({ recent_status: status } as OrderData)}\n          >\n            {status}\n          </Tag>\n        );\n      }\n    },\n    {\n      title: '재의뢰',\n      dataIndex: 're_request_count',\n      key: 're_request_count',\n      width: 65,  // 너비 최적화\n      align: 'center',\n      render: (count) => count > 0 ? (\n        <Badge count={count} style={{ backgroundColor: '#ff4d4f' }} />\n      ) : (\n        <Text type=\"secondary\" style={{ fontSize: 11 }}>0</Text>\n      )\n    },\n    {\n      title: '견적서링크',\n      key: 'quote_links',\n      width: 90,  // 너비 최적화\n      render: (_, record) => (\n        <Space>\n          {record.quote_links && record.quote_links.length > 0 ? (\n            <Badge count={record.quote_links.length}>\n              <Button size=\"small\" icon={<LinkOutlined />} style={{ fontSize: 10 }}>\n                보기\n              </Button>\n            </Badge>\n          ) : (\n            <Button size=\"small\" type=\"dashed\" style={{ fontSize: 10 }}>\n              추가\n            </Button>\n          )}\n        </Space>\n      )\n    },\n    {\n      title: '메모',\n      key: 'memo',\n      width: 60,  // 너비 최적화\n      align: 'center',\n      render: (_, record) => (\n        <Tooltip title=\"메모 관리\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<MessageOutlined />}\n            onClick={() => openMemoModal(record)}\n            style={{ fontSize: 11 }}\n          />\n        </Tooltip>\n      )\n    },\n    {\n      title: '복사',\n      key: 'copy',\n      width: 60,\n      fixed: 'right',\n      align: 'center',\n      render: (_, record) => (\n        <Tooltip title=\"같은 정보로 복사\">\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<CopyOutlined />}\n            onClick={() => handleCopyOrder(record)}\n            style={{ fontSize: 11 }}\n          />\n        </Tooltip>\n      )\n    }\n  ];\n\n  const rowSelection: TableRowSelection<OrderData> = {\n    selectedRowKeys,\n    onChange: (newSelectedRowKeys) => {\n      setSelectedRowKeys(newSelectedRowKeys);\n    },\n    selections: [\n      Table.SELECTION_ALL,\n      Table.SELECTION_INVERT,\n      Table.SELECTION_NONE,\n    ]\n  };\n\n  if (error && !loading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px 0' }}>\n        <Text type=\"danger\" style={{ fontSize: 16, display: 'block', marginBottom: 20 }}>\n          {error}\n        </Text>\n        <Button type=\"primary\" onClick={onRefresh} icon={<ReloadOutlined />}>\n          다시 시도\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* 툴바 */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col flex=\"auto\">\n          <Space>\n            <Popconfirm\n              title=\"선택한 항목을 삭제하시겠습니까?\"\n              onConfirm={handleDeleteSelected}\n              okText=\"삭제\"\n              cancelText=\"취소\"\n              disabled={selectedRowKeys.length === 0}\n            >\n              <Button\n                danger\n                icon={<DeleteOutlined />}\n                disabled={selectedRowKeys.length === 0}\n              >\n                삭제 ({selectedRowKeys.length})\n              </Button>\n            </Popconfirm>\n            <Button\n              icon={<DownloadOutlined />}\n              onClick={handleExport}\n            >\n              내보내기\n            </Button>\n            <Button\n              icon={<ReloadOutlined />}\n              onClick={onRefresh}\n            >\n              새로고침\n            </Button>\n          </Space>\n        </Col>\n        <Col>\n          <Badge count={orders.length} showZero color=\"#1890ff\" />\n        </Col>\n      </Row>\n\n      {/* 테이블 */}\n      <Table\n        rowSelection={rowSelection}\n        columns={columns}\n        dataSource={orders}\n        rowKey=\"no\"\n        loading={loading}\n        scroll={{\n          x: 'max-content',  // 콘텐츠에 맞게 자동 조정\n          y: 'calc(100vh - 400px)'  // 세로 스크롤 높이 설정\n        }}\n        size=\"middle\"\n        bordered\n        pagination={{\n          defaultPageSize: 20,\n          showSizeChanger: true,\n          showTotal: (total, range) => `${range[0]}-${range[1]} / 총 ${total}개`,\n          pageSizeOptions: ['10', '20', '50', '100'],\n          showQuickJumper: true\n        }}\n        expandable={{\n          expandedRowRender: (record) => (\n            <div style={{ padding: '16px', background: '#fafafa', borderRadius: 8 }}>\n              <Row gutter={[24, 16]}>\n                <Col span={8}>\n                  <Card size=\"small\" title=\"개인정보 동의\" bordered={false}>\n                    <Space direction=\"vertical\" style={{ width: '100%' }}>\n                      <Row justify=\"space-between\">\n                        <Text>마케팅 동의:</Text>\n                        <Tag color={record.bPrivacy1 ? 'green' : 'red'}>\n                          {record.bPrivacy1 ? '동의' : '미동의'}\n                        </Tag>\n                      </Row>\n                      <Row justify=\"space-between\">\n                        <Text>개인정보 동의:</Text>\n                        <Tag color={record.bPrivacy2 ? 'green' : 'red'}>\n                          {record.bPrivacy2 ? '동의' : '미동의'}\n                        </Tag>\n                      </Row>\n                    </Space>\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card size=\"small\" title=\"추가 정보\" bordered={false}>\n                    <Space direction=\"vertical\" style={{ width: '100%' }}>\n                      {record.post_link && (\n                        <Row>\n                          <Text strong>게시글: </Text>\n                          <a href={record.post_link} target=\"_blank\" rel=\"noopener noreferrer\">\n                            링크 보기\n                          </a>\n                        </Row>\n                      )}\n                      <Row>\n                        <Text>등록 경로: {record.designation_type || '-'}</Text>\n                      </Row>\n                    </Space>\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card size=\"small\" title=\"메모\" bordered={false}>\n                    <Button type=\"link\" onClick={() => openMemoModal(record)}>\n                      메모 추가/확인\n                    </Button>\n                  </Card>\n                </Col>\n              </Row>\n            </div>\n          ),\n          rowExpandable: (record) => true,\n          expandRowByClick: false\n        }}\n      />\n\n      {/* 모달들 */}\n      {selectedOrder && (\n        <>\n          <MemoModal\n            isOpen={memoModalOpen}\n            onClose={() => setMemoModalOpen(false)}\n            orderId={selectedOrder.no}\n            orderName={selectedOrder.sName}\n            memos={[]} // TODO: API에서 메모 가져오기\n            onAddMemo={async (content) => onAddMemo(selectedOrder.no, content)}\n          />\n          <StatusModal\n            isOpen={statusModalOpen}\n            onClose={() => setStatusModalOpen(false)}\n            orderId={selectedOrder.no}\n            orderName={selectedOrder.sName}\n            currentStatus={selectedOrder.recent_status}\n            onStatusUpdate={async (status, note) => onUpdateStatus(selectedOrder.no, status, note)}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default OrderList;","// API 서비스\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nexport interface OrderData {\n  no: number;\n  time: string;\n  designation: string;\n  designation_type: string;\n  sNick: string;\n  sNaverID: string;\n  sName: string;\n  sPhone: string;\n  post_link: string;\n  sArea: string;\n  dateSchedule?: string;\n  sConstruction: string;\n  assigned_company: string;\n  recent_status: string;\n  re_request_count: number;\n  bPrivacy1: boolean;\n  bPrivacy2: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ApiResponse<T> {\n  count: number;\n  next: string | null;\n  previous: string | null;\n  results: T[];\n}\n\nclass ApiService {\n  private baseURL = API_BASE_URL;\n\n  async fetchOrders(): Promise<OrderData[]> {\n    try {\n      const response = await fetch(`${this.baseURL}/order/api/orders/`, {\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data: ApiResponse<OrderData> = await response.json();\n      return data.results || [];\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      throw error;\n    }\n  }\n\n  async createOrder(orderData: Partial<OrderData>): Promise<OrderData> {\n    try {\n      const response = await fetch(`${this.baseURL}/order/api/orders/`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating order:', error);\n      throw error;\n    }\n  }\n\n  async updateOrderStatus(orderId: number, status: string, messageData?: any): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseURL}/order/api/orders/${orderId}/update_status/`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          status,\n          ...messageData,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error updating order status:', error);\n      throw error;\n    }\n  }\n\n  async updateOrderField(orderId: number, fieldName: string, fieldLabel: string, newValue: any): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseURL}/order/api/orders/${orderId}/update_field/`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          field_name: fieldName,\n          field_label: fieldLabel,\n          new_value: newValue,\n          author: '관리자', // TODO: 실제 로그인 사용자로 변경\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error updating order field:', error);\n      throw error;\n    }\n  }\n\n  async addMemo(orderId: number, content: string): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseURL}/order/api/orders/${orderId}/add_memo/`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          content,\n          author: '관리자', // TODO: 실제 로그인 사용자로 변경\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error adding memo:', error);\n      throw error;\n    }\n  }\n\n  async addQuoteLink(orderId: number, draftType: string, link: string): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseURL}/order/api/orders/${orderId}/add_quote_link/`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          draft_type: draftType,\n          link,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error adding quote link:', error);\n      throw error;\n    }\n  }\n\n  async deleteOrders(orderIds: number[]): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseURL}/order/api/orders/bulk_delete/`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          order_ids: orderIds,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting orders:', error);\n      throw error;\n    }\n  }\n\n  async fetchCompanies(): Promise<any[]> {\n    try {\n      const response = await fetch(`${this.baseURL}/order/api/companies/`, {\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching companies:', error);\n      throw error;\n    }\n  }\n\n  async fetchAreas(): Promise<string[]> {\n    try {\n      const response = await fetch(`${this.baseURL}/order/api/areas/`, {\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching areas:', error);\n      throw error;\n    }\n  }\n}\n\nexport const apiService = new ApiService();","// 의뢰 관리 시스템 메인 컴포넌트 (Ant Design)\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Layout,\n  Card,\n  Input,\n  Select,\n  Button,\n  Space,\n  Row,\n  Col,\n  Typography,\n  ConfigProvider,\n  Statistic,\n  Divider,\n  DatePicker,\n  message\n} from 'antd';\nimport {\n  SearchOutlined,\n  PlusOutlined,\n  TeamOutlined,\n  FileTextOutlined,\n  CheckCircleOutlined,\n  ClockCircleOutlined,\n  DashboardOutlined,\n  SyncOutlined,\n  GoogleOutlined\n} from '@ant-design/icons';\nimport koKR from 'antd/locale/ko_KR';\nimport OrderList from './orders/OrderList';\nimport { useOrders } from '../hooks';\nimport { STATUS_OPTIONS, AREA_OPTIONS } from '../constants';\nconst { Header, Content } = Layout;\nconst { Title, Text } = Typography;\nconst { Search } = Input;\nconst { RangePicker } = DatePicker;\n\nconst QuoteManagement: React.FC = () => {\n  const {\n    orders,\n    loading,\n    error,\n    filters,\n    setFilters,\n    actions\n  } = useOrders();\n\n  const [searchValue, setSearchValue] = useState('');\n  const [syncLoading, setSyncLoading] = useState(false);\n\n  // 통계 계산\n  const statistics = {\n    total: orders.length,\n    pending: orders.filter(o => o.recent_status === '접수완료').length,\n    inProgress: orders.filter(o => ['업체전달', '현장미팅', '견적전달', '시공중'].includes(o.recent_status)).length,\n    completed: orders.filter(o => o.recent_status === '완료').length\n  };\n\n  const handleSearch = (value: string) => {\n    setFilters({ ...filters, searchText: value });\n  };\n\n  const handleFilterChange = (filterType: string, value: any) => {\n    setFilters({ ...filters, [filterType]: value || undefined });\n  };\n\n  const handleDateRangeChange = (dates: any) => {\n    if (dates) {\n      setFilters({\n        ...filters,\n        dateFrom: dates[0]?.format('YYYY-MM-DD'),\n        dateTo: dates[1]?.format('YYYY-MM-DD')\n      });\n    } else {\n      const { dateFrom, dateTo, ...restFilters } = filters;\n      setFilters(restFilters);\n    }\n  };\n\n  const clearFilters = () => {\n    setFilters({});\n    setSearchValue('');\n  };\n\n  const handleGoogleSync = async () => {\n    setSyncLoading(true);\n    try {\n      // Django 컨텍스트에서 CSRF 토큰 가져오기\n      const csrfToken = (window as any).__DJANGO_CONTEXT__?.csrfToken;\n\n      const response = await fetch('/order/api/sync-google-sheets/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrfToken || '',\n        },\n        credentials: 'same-origin',\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        message.success(`동기화 완료: ${data.result.created}개 새 의뢰 추가`);\n        // 목록 새로고침\n        actions.fetchOrders();\n      } else {\n        message.error(data.message || '동기화 실패');\n      }\n    } catch (error) {\n      message.error('동기화 중 오류가 발생했습니다');\n      console.error('Sync error:', error);\n    } finally {\n      setSyncLoading(false);\n    }\n  };\n\n  return (\n    <ConfigProvider locale={koKR}>\n      <Layout style={{ minHeight: '100vh', background: '#f0f2f5' }}>\n        {/* 헤더 */}\n        <Header style={{ background: '#fff', padding: 0, boxShadow: '0 1px 4px rgba(0,21,41,.08)' }}>\n          <Row align=\"middle\" style={{ height: '100%', padding: '0 24px' }}>\n            <Col flex=\"auto\">\n              <Space align=\"center\">\n                <DashboardOutlined style={{ fontSize: 24, color: '#1890ff' }} />\n                <Title level={3} style={{ margin: 0 }}>의뢰 관리 시스템</Title>\n              </Space>\n            </Col>\n            <Col>\n              <Space>\n                <Button\n                  icon={<SyncOutlined spin={syncLoading} />}\n                  size=\"large\"\n                  loading={syncLoading}\n                  onClick={handleGoogleSync}\n                  style={{ borderColor: '#4285f4', color: '#4285f4' }}\n                >\n                  구글 시트 동기화\n                </Button>\n                <Button\n                  type=\"primary\"\n                  icon={<PlusOutlined />}\n                  size=\"large\"\n                  onClick={() => {\n                    // 구글 폼으로 새 탭에서 열기\n                    window.open('https://docs.google.com/forms/d/e/1FAIpQLSfOnhe1eBTRM5bb-r_XA6epsUkPctmqexzcwJk-MC5KlC3F4g/viewform', '_blank');\n                  }}\n                >\n                  새 의뢰\n                </Button>\n              </Space>\n            </Col>\n          </Row>\n        </Header>\n\n        <Content style={{ padding: '24px' }}>\n          {/* 통계 카드 */}\n          <Row gutter={16} style={{ marginBottom: 24 }}>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"전체 의뢰\"\n                  value={statistics.total}\n                  prefix={<FileTextOutlined />}\n                  valueStyle={{ color: '#1890ff' }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"대기중\"\n                  value={statistics.pending}\n                  prefix={<ClockCircleOutlined />}\n                  valueStyle={{ color: '#faad14' }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"진행중\"\n                  value={statistics.inProgress}\n                  prefix={<TeamOutlined />}\n                  valueStyle={{ color: '#52c41a' }}\n                />\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card>\n                <Statistic\n                  title=\"완료\"\n                  value={statistics.completed}\n                  prefix={<CheckCircleOutlined />}\n                  valueStyle={{ color: '#13c2c2' }}\n                />\n              </Card>\n            </Col>\n          </Row>\n\n          {/* 검색 및 필터 */}\n          <Card style={{ marginBottom: 24 }}>\n            <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n              {/* 검색 영역 */}\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Search\n                    placeholder=\"고객명, 전화번호, 네이버ID로 검색...\"\n                    allowClear\n                    enterButton={<SearchOutlined />}\n                    size=\"large\"\n                    value={searchValue}\n                    onChange={(e) => setSearchValue(e.target.value)}\n                    onSearch={handleSearch}\n                  />\n                </Col>\n                <Col span={12}>\n                  <RangePicker\n                    style={{ width: '100%' }}\n                    size=\"large\"\n                    placeholder={['시작일', '종료일']}\n                    onChange={handleDateRangeChange}\n                    format=\"YYYY-MM-DD\"\n                  />\n                </Col>\n              </Row>\n\n              {/* 필터 영역 */}\n              <Row gutter={16} align=\"middle\">\n                <Col span={6}>\n                  <Select\n                    placeholder=\"상태 선택\"\n                    style={{ width: '100%' }}\n                    allowClear\n                    onChange={(value) => handleFilterChange('status', value)}\n                    options={[\n                      { label: '전체 상태', value: '' },\n                      ...STATUS_OPTIONS.map(s => ({ label: s.label, value: s.value }))\n                    ]}\n                  />\n                </Col>\n                <Col span={6}>\n                  <Select\n                    placeholder=\"지역 선택\"\n                    style={{ width: '100%' }}\n                    allowClear\n                    onChange={(value) => handleFilterChange('area', value)}\n                    options={[\n                      { label: '전체 지역', value: '' },\n                      ...AREA_OPTIONS.map(area => ({ label: area, value: area }))\n                    ]}\n                  />\n                </Col>\n                <Col span={6}>\n                  <Select\n                    placeholder=\"업체 선택\"\n                    style={{ width: '100%' }}\n                    allowClear\n                    onChange={(value) => handleFilterChange('company', value)}\n                    options={[\n                      { label: '전체 업체', value: '' },\n                      // TODO: 업체 목록 API에서 가져오기\n                      { label: '업체A', value: '업체A' },\n                      { label: '업체B', value: '업체B' },\n                      { label: '업체C', value: '업체C' }\n                    ]}\n                  />\n                </Col>\n                <Col span={6}>\n                  <Button onClick={clearFilters}>\n                    필터 초기화\n                  </Button>\n                </Col>\n              </Row>\n\n              {/* 활성 필터 표시 */}\n              {Object.keys(filters).length > 0 && (\n                <>\n                  <Divider style={{ margin: '12px 0' }} />\n                  <Space wrap>\n                    <Text type=\"secondary\">활성 필터:</Text>\n                    {filters.searchText && (\n                      <Button size=\"small\" type=\"dashed\">\n                        검색: {filters.searchText}\n                      </Button>\n                    )}\n                    {filters.status && (\n                      <Button size=\"small\" type=\"dashed\">\n                        상태: {filters.status}\n                      </Button>\n                    )}\n                    {filters.area && (\n                      <Button size=\"small\" type=\"dashed\">\n                        지역: {filters.area}\n                      </Button>\n                    )}\n                    {filters.company && (\n                      <Button size=\"small\" type=\"dashed\">\n                        업체: {filters.company}\n                      </Button>\n                    )}\n                    {filters.dateFrom && filters.dateTo && (\n                      <Button size=\"small\" type=\"dashed\">\n                        기간: {filters.dateFrom} ~ {filters.dateTo}\n                      </Button>\n                    )}\n                  </Space>\n                </>\n              )}\n            </Space>\n          </Card>\n\n          {/* 의뢰 목록 테이블 */}\n          <Card>\n            <OrderList\n              orders={orders}\n              loading={loading}\n              error={error}\n              onRefresh={actions.fetchOrders}\n              onDeleteOrders={actions.deleteOrders}\n              onUpdateStatus={actions.updateOrderStatus}\n              onAddMemo={actions.addMemo}\n              onUpdateField={actions.updateOrderField}\n            />\n          </Card>\n        </Content>\n      </Layout>\n    </ConfigProvider>\n  );\n};\n\nexport default QuoteManagement;","// 의뢰 관리 훅\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { apiService } from '../services/api';\nimport { OrderData, FilterOptions, SortOptions } from '../types';\n\nexport const useOrders = () => {\n  const [orders, setOrders] = useState<OrderData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filters, setFilters] = useState<FilterOptions>({});\n  const [sortOptions, setSortOptions] = useState<SortOptions>({\n    field: 'no',\n    order: 'desc'\n  });\n\n  // 의뢰 목록 가져오기\n  const fetchOrders = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiService.fetchOrders();\n      setOrders(data);\n    } catch (err) {\n      setError('의뢰 목록을 불러오는데 실패했습니다.');\n      console.error('Error fetching orders:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 의뢰 삭제\n  const deleteOrders = useCallback(async (orderIds: number[]) => {\n    try {\n      await apiService.deleteOrders(orderIds);\n      await fetchOrders(); // 목록 새로고침\n      return { success: true };\n    } catch (err) {\n      console.error('Error deleting orders:', err);\n      return { success: false, error: '삭제 중 오류가 발생했습니다.' };\n    }\n  }, [fetchOrders]);\n\n  // 의뢰 상태 업데이트\n  const updateOrderStatus = useCallback(async (\n    orderId: number,\n    status: string,\n    messageData?: any\n  ) => {\n    try {\n      await apiService.updateOrderStatus(orderId, status, messageData);\n      await fetchOrders(); // 목록 새로고침\n      return { success: true };\n    } catch (err) {\n      console.error('Error updating order status:', err);\n      return { success: false, error: '상태 업데이트 중 오류가 발생했습니다.' };\n    }\n  }, [fetchOrders]);\n\n  // 의뢰 필드 업데이트\n  const updateOrderField = useCallback(async (\n    orderId: number,\n    fieldName: string,\n    fieldLabel: string,\n    newValue: any\n  ) => {\n    try {\n      await apiService.updateOrderField(orderId, fieldName, fieldLabel, newValue);\n      await fetchOrders(); // 목록 새로고침\n      return { success: true };\n    } catch (err) {\n      console.error('Error updating order field:', err);\n      return { success: false, error: '필드 업데이트 중 오류가 발생했습니다.' };\n    }\n  }, [fetchOrders]);\n\n  // 메모 추가\n  const addMemo = useCallback(async (orderId: number, content: string) => {\n    try {\n      await apiService.addMemo(orderId, content);\n      await fetchOrders(); // 목록 새로고침\n      return { success: true };\n    } catch (err) {\n      console.error('Error adding memo:', err);\n      return { success: false, error: '메모 추가 중 오류가 발생했습니다.' };\n    }\n  }, [fetchOrders]);\n\n  // 견적 링크 추가\n  const addQuoteLink = useCallback(async (\n    orderId: number,\n    draftType: string,\n    link: string\n  ) => {\n    try {\n      await apiService.addQuoteLink(orderId, draftType, link);\n      await fetchOrders(); // 목록 새로고침\n      return { success: true };\n    } catch (err) {\n      console.error('Error adding quote link:', err);\n      return { success: false, error: '견적 링크 추가 중 오류가 발생했습니다.' };\n    }\n  }, [fetchOrders]);\n\n  // 필터링된 의뢰 목록 계산\n  const getFilteredOrders = useCallback(() => {\n    let filtered = [...orders];\n\n    // 필터 적용\n    if (filters.status) {\n      filtered = filtered.filter(order => order.recent_status === filters.status);\n    }\n    if (filters.area) {\n      filtered = filtered.filter(order => order.sArea === filters.area);\n    }\n    if (filters.company) {\n      filtered = filtered.filter(order => order.assigned_company === filters.company);\n    }\n    if (filters.searchText) {\n      const searchLower = filters.searchText.toLowerCase();\n      const searchText = filters.searchText;\n      filtered = filtered.filter(order =>\n        order.sName.toLowerCase().includes(searchLower) ||\n        order.sNick.toLowerCase().includes(searchLower) ||\n        order.sPhone.includes(searchText) ||\n        order.sNaverID.toLowerCase().includes(searchLower)\n      );\n    }\n\n    // 정렬 적용\n    filtered.sort((a, b) => {\n      const aValue = a[sortOptions.field as keyof OrderData];\n      const bValue = b[sortOptions.field as keyof OrderData];\n\n      if (aValue === undefined || bValue === undefined) return 0;\n\n      const comparison = aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      return sortOptions.order === 'asc' ? comparison : -comparison;\n    });\n\n    return filtered;\n  }, [orders, filters, sortOptions]);\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    fetchOrders();\n  }, [fetchOrders]);\n\n  return {\n    orders: getFilteredOrders(),\n    loading,\n    error,\n    filters,\n    setFilters,\n    sortOptions,\n    setSortOptions,\n    actions: {\n      fetchOrders,\n      deleteOrders,\n      updateOrderStatus,\n      updateOrderField,\n      addMemo,\n      addQuoteLink\n    }\n  };\n};"],"names":["TextArea","Input","Text","Title","Typography","_ref","isOpen","onClose","orderId","orderName","memos","onAddMemo","newMemo","setNewMemo","useState","isSubmitting","setIsSubmitting","_jsx","Modal","title","_jsxs","Space","children","MessageOutlined","open","onCancel","width","footer","destroyOnClose","direction","style","size","background","padding","borderRadius","level","value","onChange","e","target","placeholder","rows","disabled","marginBottom","Button","type","onClick","async","trim","result","success","message","error","err","warning","loading","length","Empty","description","List","dataSource","renderItem","memo","Item","border","Meta","UserOutlined","strong","author","fontSize","ClockCircleOutlined","marginRight","dateString","created_at","Date","toLocaleDateString","year","month","day","hour","minute","whiteSpace","content","maxHeight","overflow","STATUS_OPTIONS","label","color","AREA_OPTIONS","_STATUS_OPTIONS$find","_STATUS_OPTIONS$find2","_STATUS_OPTIONS$find3","currentStatus","onStatusUpdate","selectedStatus","setSelectedStatus","note","setNote","handleCancel","EditOutlined","info","icon","CheckCircleOutlined","Alert","Tag","find","opt","showIcon","Radio","wrap","map","status","borderColor","backgroundColor","fontWeight","orders","onRefresh","onDeleteOrders","onUpdateStatus","onUpdateField","selectedRowKeys","setSelectedRowKeys","selectedOrder","setSelectedOrder","memoModalOpen","setMemoModalOpen","statusModalOpen","setStatusModalOpen","openMemoModal","order","columns","dataIndex","key","sorter","a","b","time","getTime","render","date","toLocaleTimeString","filters","text","onFilter","record","designation_type","designation","_","sName","sNick","sNaverID","Tooltip","href","concat","sPhone","PhoneOutlined","link","sPost","ellipsis","maxWidth","rel","LinkOutlined","Array","from","Set","o","sArea","area","EnvironmentOutlined","dateSchedule","scheduleDate","today","diffDays","Math","ceil","CalendarOutlined","showTitle","construction","placement","assigned_company","filter","Boolean","company","TeamOutlined","s","recent_status","statusOption","cursor","align","count","Badge","quote_links","fixed","CopyOutlined","_objectSpread","no","undefined","toISOString","updated_at","handleCopyOrder","rowSelection","newSelectedRowKeys","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","textAlign","display","ReloadOutlined","_Fragment","Row","gutter","Col","flex","Popconfirm","onConfirm","okText","cancelText","danger","DeleteOutlined","DownloadOutlined","handleExport","csvContent","join","sConstruction","replace","blob","Blob","document","createElement","url","URL","createObjectURL","setAttribute","split","visibility","body","appendChild","click","removeChild","showZero","rowKey","scroll","x","y","bordered","pagination","defaultPageSize","showSizeChanger","showTotal","total","range","pageSizeOptions","showQuickJumper","expandable","expandedRowRender","span","Card","justify","bPrivacy1","bPrivacy2","post_link","rowExpandable","expandRowByClick","MemoModal","StatusModal","apiService","constructor","baseURL","process","fetchOrders","response","fetch","this","credentials","headers","ok","Error","json","results","console","createOrder","orderData","method","JSON","stringify","updateOrderStatus","messageData","updateOrderField","fieldName","fieldLabel","newValue","field_name","field_label","new_value","addMemo","addQuoteLink","draftType","draft_type","deleteOrders","orderIds","order_ids","fetchCompanies","fetchAreas","Header","Content","Layout","Search","RangePicker","DatePicker","QuoteManagement","setFilters","actions","useOrders","setOrders","setLoading","setError","sortOptions","setSortOptions","field","useCallback","data","getFilteredOrders","filtered","searchText","searchLower","toLowerCase","includes","sort","aValue","bValue","comparison","useEffect","searchValue","setSearchValue","syncLoading","setSyncLoading","statistics","pending","inProgress","completed","handleFilterChange","filterType","ConfigProvider","locale","koKR","minHeight","boxShadow","height","DashboardOutlined","margin","SyncOutlined","spin","_DJANGO_CONTEXT__","csrfToken","window","__DJANGO_CONTEXT__","created","PlusOutlined","Statistic","prefix","FileTextOutlined","valueStyle","allowClear","enterButton","SearchOutlined","onSearch","dates","_dates$","_dates$2","dateFrom","format","dateTo","restFilters","_objectWithoutProperties","_excluded","Select","options","clearFilters","Object","keys","Divider","OrderList"],"sourceRoot":""}